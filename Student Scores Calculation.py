# -*- coding: utf-8 -*-
"""TSF Task # 01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DAPssD5VGz0nyVH9lFE0GRFcEsSDTExc
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.formula.api as smf
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv('/content/drive/MyDrive/ML-Datasets/student_scores - student_scores.csv')

df.head()

"""#Exploratory Data Analysis"""

df.columns

df.dtypes

df.info()

df.describe()

df.corr()

df.isnull().sum()

"""#Distribution

"""

sns.distplot(df["Scores"])
plt.show()

sns.distplot(df["Scores"], kde=False, rug=True)
plt.show()

sns.jointplot(x="Hours", y="Scores", data=df, kind="reg")
plt.show()

"""#Performing Simple Regression

**Calculating the coefficent of simple linear regression equation: y = B0 + B1.x (B1: Slope, B0: Intercept)**
"""

mean_x = np.mean(df["Hours"])
mean_y = np.mean(df["Scores"])
num = 0
den = 0
x = list(df['Hours'])
y = list(df['Scores'])
for i in range(len(df)):
  num+=(x[i]-mean_x)*(y[i]-mean_y)
  den+=(x[i]-mean_x)**2
B1 = num/den

B1

B0 = mean_y - (B1*mean_x)

B0

"""#Making Prediction"""

df['predicted_score'] = B0 + B1*df['Hours']

df.head()

plt.scatter(df['Hours'], df['Scores'])
plt.plot(df['Hours'], df['predicted_score'], color="red")
plt.title("Hours vs Scores")
plt.xlabel("Hours")
plt.ylabel("Scores")
plt.plot()

"""Prediction of Given Value: 9.25"""

B0 + B1*9.25

y = list(df['Scores'].values)
y_pred = list(df['predicted_score'].values)

"""#RMSE"""

s = sum([(y_pred[i]-y[i])**2 for i in range(len(y))])
rmse = (np.sqrt(s/len(df)))/mean_y

rmse

"""#OLS Model"""

model = smf.ols("Scores ~ Hours", data=df).fit()

df['pred_ols']= model.predict(df['Hours'])

plt.figure(figsize=(12,6))
plt.plot(df['Hours'], df['pred_ols'], color="red")
plt.scatter(df['Hours'], df['Scores'])
plt.title("Hours vs Scores")
plt.xlabel("Hours")
plt.ylabel("Scores")
plt.plot()

"""**We can observe the predicted value for 9.25 hours is around 92**

#Additional Conclusion: Categorical Prediction
"""

cut_off = 40

df['Passed?'] = df['Scores']>=40

df.head()

"""#Plotting the given data result"""

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('Passed?').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

"""#Feature Engineering"""

feature = df['Hours'].values.reshape(-1,1)
target = df['Passed?'].values

"""#Splitting the Data"""

X_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.2, random_state=0)

"""#Training the KNN Model"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

"""#Accuracy"""

knn.score(X_train, y_train)

knn.score(X_test, y_test)

"""#Predicting the outcomes"""

get_results = [[9.25]]

knn.predict(get_results)

knn.predict([[14]])

knn.predict([[3]])

